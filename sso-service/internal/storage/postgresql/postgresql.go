package postgresql

import (
	"context"
	"database/sql"
	"diaryhub/sso-service/internal/domain/models"
	"fmt"

	_ "github.com/lib/pq"
)

type Storage struct {
	db *sql.DB
}

func New(connStr string) (*Storage, error) {
	const op = "storage.postgresql.New"

	var db *sql.DB
	var err error

	db, err = sql.Open("postgres", connStr)
	if err != nil {
		return nil, fmt.Errorf("%s: %w", op, err)
	}

	if _, err := db.Exec(`
        CREATE TABLE IF NOT EXISTS users(
            id     INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            status TEXT NOT NULL
        );
    `); err != nil {
		return nil, fmt.Errorf("%s: %w", op, err)
	}

	return &Storage{db: db}, nil
}

func (strg *Storage) Close() {
	strg.db.Close()
}

func (strg *Storage) SaveUser(ctx context.Context, email string, passHash []byte) (int64, error) {
	return 52, nil
}

func (strg *Storage) User(ctx context.Context, email string) (models.User, error) {
	return models.User{ID: 52, Email: "lol@lol.com", PassHash: []byte("##secret##")}, nil
}

func (strg *Storage) IsAdmin(ctx context.Context, userID int64) (bool, error) {
	return true, nil
}

func (strg *Storage) App(ctx context.Context, appID int) (models.App, error) {
	return models.App{ID: 35, Name: "BASE APP", Secret: "##secret##"}, nil
}
